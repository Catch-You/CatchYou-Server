name: Java CI with Gradle & Deploy to EC2

# event trigger
# master 브랜치에 push. pr 되었을 때 실행
on:
  push:
    branches: [ "master" ]
  pull_request:
    types : 
      - closed
    branches: [ "master" ]

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: catchyou-cicd-bucket
  CODE_DEPLOY_APP_NAME: catchyou-deploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: catchyou-deploy-group

permissions:
  contents: read

jobs:
  deploy:
    name : Deploy
    runs-on: ubuntu-latest
    environment : production
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # 1) 기본 체크아웃
      - name: Checkout
      - uses: actions/checkout@v2

      # JDK setting - github actions에서 사용할 JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v1
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경별 properties 파일 생성(1) - application.properties
      - run: mkdir -p ./src/main/resources
      - run: touch ./src/main/resources/application.properties
      - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
      - run: cat ./src/main/resources/application.properties

      # 3) gradlew  권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ${{ env.working-directory }}
      
      
      # 4) gradlew 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          arguments: clean build -x test
	
      # make zip file
      - name: Make zip file
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash
        
      # AWS 사용자 정보 입력
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ACCESS_KEY_SECRET }}
          aws-region: ap-northeast-2
          
      # S3에 zip 파일 업로드
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://${{ secrets.S3_BUCKET_NAME }}/deploy/$GITHUB_SHA.zip --source .
        
      # CodeDeploy에 배포 요청
      - name: Code Deploy
        run: aws deploy create-deployment --application-name ${{ secrets.CODE_DEPLOY_APP_NAME }}
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }}
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=deploy/$GITHUB_SHA.zip
